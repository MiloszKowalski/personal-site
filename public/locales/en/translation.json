{
  "navigation": {
    "main page": "home",
    "resume": "résumé",
    "portfolio": "portfolio",
    "about me": "about"
  },
  "homepage": {
    "hero": {
      "i am milosz": "I am Miłosz.",
      "i create": "I create",
      "button1": "PORTFOLIO",
      "button2": "CONTACT",
      "clean code": "clean code.",
      "gorgeous designs": "gorgeous designs.",
      "working atmosphere": "a nice working atmosphere.",
      "projects start finish": "projects from start to finish."
    },
    "coding with passion": {
      "heading": "Coding with passion",
      "p1": "My coding adventure began when I turned 15.",
      "p2": "Since then, I've been spending most of my free time developing and refining my skills in that field.",
      "p3": "The quality of my code is very important for me - I always try to look for solutions, that will make my code readable and effective.",
      "button": "SEE MY RÉSUMÉ"
    },
    "experience with design": {
      "heading": "Experienced in graphic design",
      "p1": "Before I started programming, I used to be focused on graphic design.",
      "p2": "The skills and experience I've aquired back then help me with creating animations and user interfaces up to this day.",
      "button": "SEE MY WORK"
    },
    "footer": {
      "p1": "Made with ❤ by myself.",
      "p2": "Copyright Miłosz Kowalski ",
      "p3": ". All rights reserved."
    }
  },
  "resume": {
    "experience": "EXPERIENCE",
    "techstack": "TECH STACK",
    "skills": "SKILLS",
    "tech": {
      "backend": {
        "C#": "solid understanding of the language - advanced async, SOLID principles, design patterns;",
        "ASPNET Core": "creating WebAPI using MVC pattern;",
        "NET": "familarity with the runtime environment, especially .NET Core;",
        "autofac": "basics of Dependency Injection;",
        "xUnitnet": "basic unit testing."
      },
      "frontend": {
        "JavaScript": "ECMAScript 6+, basics of TypeScript, basic knowledge of JS ecosystem;",
        "Reactjs": "create-react-app, JSX, Context, Hooks;",
        "Vuejs": "Vue CLI, transitions, filters, async components, Vuex store;",
        "axios": "basic REST API requests; request middleware;",
        "Jest": "basic unit testing."
      },
      "design": {
        "Photoshop": "image correction and manipulation; layers, masks, adjustments etc.;",
        "Illustrator": "shape building; logo design; exporting to SVG format;",
        "PremierePro": "video editing, syncing, montage; basic color correction;",
        "AfterEffects": "keyframe-based animations; basic motion graphics;",
        "figmaadobexd": "basic design and prototyping for UI/UX."
      }
    },
    "skills-list": {
      "english-label": "English",
      "english": "fluent, allowing communication and reading (or creating) technical documentation;",
      "abstract-label": "Abstract thinking",
      "abstract": "problem solving, chunking them into smaller ones;",
      "uiux-label": "UI/UX and design fundamentals",
      "uiux": "user interfaces, logo, animations;",
      "version-label": "Version Control",
      "version": "Git/GitHub;",
      "teamwork-label": "Teamwork and fast learning."
    },
    "modal-description": {
      "experience": {
        "FollowUP": "social media automation - creating and maintaining server software responsible for user interaction and Instagram profiles automation (ASP.Net Core); creating client's dashboard for managing the services (Vue.js); managing MSSQL database; visual identification; creation of the landing page with services' description."
      },
      "backend": {
        "CSharp": "solid understanding of the language - delegates (with lambdas, Action and Func), generics, reflection, advanced async etc.; SOLID principles; design patterns - Factory, Template Method, Repository, Singleton, Observer etc.",
        "ASPNET Core": "creating WebAPI using MVC pattern, authentication and authorization using  JSON Web Tokens; background services; EntityFramework Core + MSSQL",
        "NET": "familarity with the runtime environment, especially .NET Core, knowledge of its frameworks and platforms",
        "autofac": "basics of Dependency Injection; registering and resolving services; lifetime scopes",
        "xUnitnet": "basic unit testing"
      },
      "frontend": {
        "JavaScript": "ECMAScript 6+; Array functions; Promises, async/await, local storage; basics of TypeScript - types, interfaces, generics; basic understanding of JavaScript ecosystem (Webpack, Babel, ESLint); knowledge of event propagation and event loop",
        "Reactjs": "create-react-app; JSX; functional and class components; Higher Order Components; Render Props; Context; Hooks",
        "Vuejs": "Vue CLI; transitions; filters; async components; Vuex store",
        "axios": "basic REST API requests; request middleware",
        "Jest": "basic unit testing"
      },
      "design": {
        "Photoshop": "image correction and manipulation; layers, masks, adjustments etc.",
        "Illustrator": "shape building; logo design; exporting to SVG format",
        "Premiere Pro": "video editing, syncing, montage; basic color correction",
        "AfterEffects": "keyframe-based animations; basic motion graphics",
        "figmaadobexd": "basic design and prototyping for UI/UX"
      }
    }
  },
  "portfolio": {
    "backend": {
      "followup-backend": {
        "title": "FollowUP - social media automation",
        "description": "FollowUP started as a three-people startup. We used Trello as our work organizing tool. In the beginning, I used to be only concerned about frontend. However, communication problems with the backend guy made me take on also his tasks. It has let me substantially develop my skills. The project was pretty demanding - besides standard user interaction, it also offered Instagram profile automation. It required pretty sophisticated architecture and the use of multithreading. I tried to keep my codebase transparent, so I've applied patterns such as CQS, or Dependency Injection. For this purpose, I used Autofac and AutoMapper libraries. Also, I've used the exception handling middleware, which made request-level error handling easy and convenient. For authentication and authorization, I used JSON Web Tokens, which also involved refreshing them. In addition to that, as we were using Instagram's internal API, I've had an opportunity to patiently observe the application's network traffic and draw conclusions, with the help of tools such as Postman and mitmproxy. Fighting with Instagram's anti-spam security took too much time, which has forbidden the on-time project delivery. Nonetheless, it hasn't been closed - just postponed to the after-hours."
      }
    },
    "frontend": {
      "followup-dashboard": {
        "title": "FollowUP - management dashboard",
        "description": "Management dashboard of FollowUP agency's services, dedicated to our WebAPI. What's interesting, when I started creating it, I've had no experience with the Vue.js framework. I figured that the project would be perfect for learning it, as it required a few different views and also an API integration. The whole project, including UI/UX, is made entirely by myself. Because of the problems on the backend side of the project, today's dashboard doesn't implement all the planned functionality (it lacks promotion scheduling, running options, etc.). However, managing them, the addition of Instagram account, and changing its settings is available. The biggest priority of the project was the UI clarity and general convenience. I've also paid lots of attention to UI animations, which made the application even more pleasant to use. This project has taught me how to work with SPA applications based on components, centralized application state, and Axios library. All of this was supervised by ESLint, with Airbnb's configuration. Moreover, I've had an opportunity to develop my fast self-learning skills in foreign technology."
      },
      "followup-landing": {
        "title": "FollowUP - landing page",
        "description": "Every internet business needs a landing page - FollowUP wasn't an exception. I opted for a simple, clear layout divided into sections, consisting of a header, simple isometric illustration, and a brief description. For better code organization, I've used a simple framework called DnaWeb, which has let me chunk the HTML code of the website. Moreover, it made the process of adding reveal animations on scrolling a lot easier. Animations bound to the illustrations are also pretty interesting. In the 'likes and follows' view, I've pushed SVG's capabilities to its limits and introduced an animation related to clipPath, which allowed me not only to draw a chart on the board but also to make the buttons beneath them interactive. What's more, I've put a contact form on the page, bound to the Netlify Forms technology."
      },
      "mkowalski-dev": {
        "title": "This page",
        "description": "Yeah, I know... Including the portfolio page on the portfolio page is a bit cringy, nevertheless, my decision was guided by the technologies I've used. Namely, it's my first project where I've used React.js and TypeScript. In retrospect, React might have not been the best choice for the page that simple, however, that mistake has let me understand deeply its inner workings, and, in combination with TypeScript, it gave me a solid foundation for creating real applications based on this framework. The biggest problem for me was the dynamically rendered DOM, which has disallowed me to properly reveal (animate) DOM elements on scrolling, as the querySelector was unavailable for me. What's more, I couldn't find a proper animation library, which would solve my problems - every one of them created more trouble than profit. This has led me to create my own, universal reveal component, which additionally doesn't create any unnecessary wrapper elements, allowing the DOM to save its original layout i.e. with the use of the CSS grid. Likewise, react-router turned out to not be the best solution for the required navigation. If I were to choose the technology today, I would probably decide on something like Gatsby.js or Next.js - about which I had no knowledge whatsoever back then."
      }
    },
    "design": {
      "followup-design": {
        "title": "FollowUP - visual identification",
        "description": "FollowUP's visual identification included its logo, logotype, and business cards associated with the company. The main theme of the design was dark graphite background, giving the recipient a sense of professionalism, and some blue accents giving the solution a bit of freshness. What's more, the arrow in the mark is strictly bound to the use of automation, whose main objective was to promote social media profiles, while the heart symbol, being a part of the letter \"P\" relates to Instagram's like icon (as it was the target platform of the application). The introduction of the wavy theme was supposed to make the whole lighter in reception, recalling familiar, mild shapes, which additionally smoothens everything. Both the logo, and the logotype were created in two color versions, and also in monochromatic, which in the combination with the project's simplicity allows the marks to be printed. I've skipped the brand book this time, as the work was supposed to be used only by me for the company's internal purposes."
      }
    }
  },
  "contact": {
    "header": "Contact me!",
    "fullname": "Full Name",
    "phone": "Phone",
    "content": "Message",
    "send": "Send"
  },
  "about": {
    "question": "A few words about me?",
    "answer": "Take hip-hop-ish, street-like style and give it a tie. Mix internal calm with a big dose of smile. Add love for the nature and a little bit of perfectionism. Put it in front of a computer screen and surround it with dozens of plants - at this moment you should see something that looks pretty similar :)"
  }
}